{"ast":null,"code":"import * as type from '../types';\nconst initialState = {\n  lists: []\n};\nexport default function lists(state = initialState, action) {\n  switch (action.type) {\n    case type.GET_LISTS_SUCCESS:\n      return { ...state,\n        lists: action.payload\n      };\n\n    case type.POST_LIST_SUCCESS:\n      return { ...state,\n        lists: action.payload\n      };\n\n    case type.PUT_LIST_SUCCESS:\n      return { ...state,\n        lists: action.payload.data\n      };\n\n    case type.DELETE_LIST_SUCCESS:\n      return { ...state,\n        lists: action.payload\n      };\n\n    case type.POST_TODO_SUCCESS:\n      let newList = state.lists.filter(list => list._id !== action.payload.data._id);\n      return { ...state,\n        lists: [...newList, action.payload.data]\n      };\n\n    case type.PUT_TODO_SUCCESS:\n      let index = null;\n      let tempNewlist = state.lists.filter((list, i) => {\n        if (list._id === action.payload._id) {\n          index = i;\n          return list;\n        }\n      });\n      const {\n        lists\n      } = state;\n      lists[index] = action.payload;\n      return { ...state,\n        lists\n      };\n\n    case type.DELETE_TODO_SUCCESS:\n      let tempList = state.lists;\n      let listToUpdate = tempList.filter(list => list._id === action.payload._id)[0];\n      let tempIndex = tempList.indexOf(listToUpdate);\n      tempList[tempIndex] = action.payload;\n      return { ...state,\n        lists: [...tempList]\n      };\n\n    case type.CHANGE_STATUS_SUCCESS:\n      console.log(action.payload);\n      const listId = action.payload._id;\n      console.log(1, listId);\n      return state;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/rana/Documents/todoList/todolist/src/redux/reducers/lists.js"],"names":["type","initialState","lists","state","action","GET_LISTS_SUCCESS","payload","POST_LIST_SUCCESS","PUT_LIST_SUCCESS","data","DELETE_LIST_SUCCESS","POST_TODO_SUCCESS","newList","filter","list","_id","PUT_TODO_SUCCESS","index","tempNewlist","i","DELETE_TODO_SUCCESS","tempList","listToUpdate","tempIndex","indexOf","CHANGE_STATUS_SUCCESS","console","log","listId"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,UAAtB;AAGA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE;AADa,CAArB;AAKA,eAAe,SAASA,KAAT,CAAeC,KAAK,GAAGF,YAAvB,EAAqCG,MAArC,EAA4C;AAC1D,UAAQA,MAAM,CAACJ,IAAf;AACC,SAAKA,IAAI,CAACK,iBAAV;AACC,aAAM,EACL,GAAGF,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAN;;AAID,SAAKN,IAAI,CAACO,iBAAV;AACC,aAAM,EACL,GAAGJ,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAN;;AAID,SAAKN,IAAI,CAACQ,gBAAV;AACC,aAAM,EACL,GAAGL,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAAP,CAAeG;AAFjB,OAAN;;AAID,SAAKT,IAAI,CAACU,mBAAV;AACA,aAAM,EACL,GAAGP,KADE;AAELD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFT,OAAN;;AAIA,SAAKN,IAAI,CAACW,iBAAV;AACC,UAAIC,OAAO,GAAGT,KAAK,CAACD,KAAN,CAAYW,MAAZ,CAAmBC,IAAI,IAAGA,IAAI,CAACC,GAAL,KAAaX,MAAM,CAACE,OAAP,CAAeG,IAAf,CAAoBM,GAA3D,CAAd;AACA,aAAM,EACL,GAAGZ,KADE;AAELD,QAAAA,KAAK,EAAE,CAAC,GAAGU,OAAJ,EAAaR,MAAM,CAACE,OAAP,CAAeG,IAA5B;AAFF,OAAN;;AAID,SAAKT,IAAI,CAACgB,gBAAV;AACC,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,WAAW,GAAGf,KAAK,CAACD,KAAN,CAAYW,MAAZ,CAAmB,CAACC,IAAD,EAAMK,CAAN,KAAW;AAC/C,YAAGL,IAAI,CAACC,GAAL,KAAaX,MAAM,CAACE,OAAP,CAAeS,GAA/B,EAAmC;AAClCE,UAAAA,KAAK,GAAGE,CAAR;AACA,iBAAOL,IAAP;AACA;AACD,OALiB,CAAlB;AAMA,YAAM;AAACZ,QAAAA;AAAD,UAAUC,KAAhB;AACAD,MAAAA,KAAK,CAACe,KAAD,CAAL,GAAeb,MAAM,CAACE,OAAtB;AACA,aAAM,EACL,GAAGH,KADE;AAELD,QAAAA;AAFK,OAAN;;AAID,SAAKF,IAAI,CAACoB,mBAAV;AACC,UAAIC,QAAQ,GAAGlB,KAAK,CAACD,KAArB;AACA,UAAIoB,YAAY,GAAGD,QAAQ,CAACR,MAAT,CAAgBC,IAAI,IAAGA,IAAI,CAACC,GAAL,KAAaX,MAAM,CAACE,OAAP,CAAeS,GAAnD,EAAwD,CAAxD,CAAnB;AACA,UAAIQ,SAAS,GAAGF,QAAQ,CAACG,OAAT,CAAiBF,YAAjB,CAAhB;AACAD,MAAAA,QAAQ,CAACE,SAAD,CAAR,GAAsBnB,MAAM,CAACE,OAA7B;AACA,aAAO,EACN,GAAGH,KADG;AAEND,QAAAA,KAAK,EAAE,CAAC,GAAGmB,QAAJ;AAFD,OAAP;;AAID,SAAKrB,IAAI,CAACyB,qBAAV;AACCC,MAAAA,OAAO,CAACC,GAAR,CAAYvB,MAAM,CAACE,OAAnB;AACA,YAAMsB,MAAM,GAAGxB,MAAM,CAACE,OAAP,CAAeS,GAA9B;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAcC,MAAd;AACA,aAAOzB,KAAP;;AACD;AACC,aAAOA,KAAP;AAxDF;AA0DA","sourcesContent":["import * as type from '../types';\n\n\nconst initialState = {\n\tlists: [],\n}\n\n\nexport default function lists(state = initialState, action){\n\tswitch (action.type){\n\t\tcase type.GET_LISTS_SUCCESS:\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: action.payload\n\t\t\t}\n\t\tcase type.POST_LIST_SUCCESS:\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: action.payload,\n\t\t\t}\n\t\tcase type.PUT_LIST_SUCCESS:\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: action.payload.data,\n\t\t\t}\n\t\tcase type.DELETE_LIST_SUCCESS:\n\t\treturn{\n\t\t\t...state,\n\t\t\tlists: action.payload\n\t\t}\n\t\tcase type.POST_TODO_SUCCESS:\n\t\t\tlet newList = state.lists.filter(list=> list._id !== action.payload.data._id);\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: [...newList, action.payload.data ]\n\t\t\t}\n\t\tcase type.PUT_TODO_SUCCESS:\n\t\t\tlet index = null;\n\t\t\tlet tempNewlist = state.lists.filter((list,i)=> {\n\t\t\t\tif(list._id === action.payload._id){\n\t\t\t\t\tindex = i;\n\t\t\t\t\treturn list;\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst {lists} = state;\n\t\t\tlists[index] = action.payload;\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists\n\t\t\t}\n\t\tcase type.DELETE_TODO_SUCCESS:\n\t\t\tlet tempList = state.lists;\n\t\t\tlet listToUpdate = tempList.filter(list=> list._id === action.payload._id)[0];\n\t\t\tlet tempIndex = tempList.indexOf(listToUpdate);\n\t\t\ttempList[tempIndex] = action.payload;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlists: [...tempList]\n\t\t\t}\n\t\tcase type.CHANGE_STATUS_SUCCESS:\n\t\t\tconsole.log(action.payload);\n\t\t\tconst listId = action.payload._id;\n\t\t\tconsole.log(1,listId)\n\t\t\treturn state;\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}"]},"metadata":{},"sourceType":"module"}