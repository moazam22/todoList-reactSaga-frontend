{"ast":null,"code":"import _toConsumableArray from\"/home/rana/Documents/todoList/todolist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/rana/Documents/todoList/todolist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as type from'../types';var initialState={lists:[]};export default function lists(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case type.GET_LISTS_SUCCESS:return _objectSpread(_objectSpread({},state),{},{lists:action.payload});case type.POST_LIST_SUCCESS:return _objectSpread(_objectSpread({},state),{},{lists:action.payload});case type.PUT_LIST_SUCCESS:return _objectSpread(_objectSpread({},state),{},{lists:action.payload.data});case type.DELETE_LIST_SUCCESS:return _objectSpread(_objectSpread({},state),{},{lists:action.payload});case type.POST_TODO_SUCCESS:var newList=state.lists.filter(function(list){return list._id!==action.payload.data._id;});return _objectSpread(_objectSpread({},state),{},{lists:[].concat(_toConsumableArray(newList),[action.payload.data])});case type.PUT_TODO_SUCCESS:var index=null;var tempNewlist=state.lists.filter(function(list,i){if(list._id===action.payload._id){index=i;return list;}});var _lists=state.lists;_lists[index]=action.payload;return _objectSpread(_objectSpread({},state),{},{lists:_lists});case type.DELETE_TODO_SUCCESS:var tempList=state.lists;var listToUpdate=tempList.filter(function(list){return list._id===action.payload._id;})[0];var tempIndex=tempList.indexOf(listToUpdate);tempList[tempIndex]=action.payload;return _objectSpread(_objectSpread({},state),{},{lists:_toConsumableArray(tempList)});case type.CHANGE_STATUS_SUCCESS:var listId=action.payload._id;var temp=state.lists.filter(function(list){return list._id===listId;})[0];var oldList=state.lists.filter(function(list){return list._id!==listId;});temp.todos=_toConsumableArray(action.payload.todos);state.lists=[].concat(_toConsumableArray(oldList),[temp]);return _objectSpread({},state);default:return state;}}","map":{"version":3,"sources":["/home/rana/Documents/todoList/todolist/src/redux/reducers/lists.js"],"names":["type","initialState","lists","state","action","GET_LISTS_SUCCESS","payload","POST_LIST_SUCCESS","PUT_LIST_SUCCESS","data","DELETE_LIST_SUCCESS","POST_TODO_SUCCESS","newList","filter","list","_id","PUT_TODO_SUCCESS","index","tempNewlist","i","DELETE_TODO_SUCCESS","tempList","listToUpdate","tempIndex","indexOf","CHANGE_STATUS_SUCCESS","listId","temp","oldList","todos"],"mappings":"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","sourcesContent":["import * as type from '../types';\n\n\nconst initialState = {\n\tlists: [],\n}\n\n\nexport default function lists(state = initialState, action){\n\tswitch (action.type){\n\t\tcase type.GET_LISTS_SUCCESS:\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: action.payload\n\t\t\t}\n\t\tcase type.POST_LIST_SUCCESS:\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: action.payload,\n\t\t\t}\n\t\tcase type.PUT_LIST_SUCCESS:\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: action.payload.data,\n\t\t\t}\n\t\tcase type.DELETE_LIST_SUCCESS:\n\t\treturn{\n\t\t\t...state,\n\t\t\tlists: action.payload\n\t\t}\n\t\tcase type.POST_TODO_SUCCESS:\n\t\t\tlet newList = state.lists.filter(list=> list._id !== action.payload.data._id);\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists: [...newList, action.payload.data ]\n\t\t\t}\n\t\tcase type.PUT_TODO_SUCCESS:\n\t\t\tlet index = null;\n\t\t\tlet tempNewlist = state.lists.filter((list,i)=> {\n\t\t\t\tif(list._id === action.payload._id){\n\t\t\t\t\tindex = i;\n\t\t\t\t\treturn list;\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst {lists} = state;\n\t\t\tlists[index] = action.payload;\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tlists\n\t\t\t}\n\t\tcase type.DELETE_TODO_SUCCESS:\n\t\t\tlet tempList = state.lists;\n\t\t\tlet listToUpdate = tempList.filter(list=> list._id === action.payload._id)[0];\n\t\t\tlet tempIndex = tempList.indexOf(listToUpdate);\n\t\t\ttempList[tempIndex] = action.payload;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlists: [...tempList]\n\t\t\t}\n\t\tcase type.CHANGE_STATUS_SUCCESS:\n\t\t\tconst listId = action.payload._id;\n\t\t\tlet temp = state.lists.filter(list => list._id === listId)[0];\n\t\t\tlet oldList = state.lists.filter(list => list._id !== listId);\n\t\t\ttemp.todos = [...action.payload.todos];\n\t\t\tstate.lists = [...oldList, temp];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t}\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}"]},"metadata":{},"sourceType":"module"}