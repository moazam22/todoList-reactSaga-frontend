{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as types from '../types';\nimport axios from 'axios';\n\nfunction* postTodo(action) {\n  try {\n    let newTodos = yield axios.post(`http://localhost:3001/list/todo/${action.payload.id}`, action.payload.data);\n    yield put({\n      type: types.POST_TODO_SUCCESS,\n      payload: newTodos\n    });\n  } catch (e) {\n    yield put({\n      type: types.POST_TODO_FAILURE,\n      payload: e.message\n    });\n  }\n}\n\nfunction* editTodo(action) {\n  try {\n    let newTodo = yield axios.put(`http://localhost:3001/list/todo/${action.payload.id}`, action.payload.data);\n    yield put({\n      type: types.PUT_TODO_SUCCESS,\n      payload: newTodo.data\n    });\n  } catch (e) {\n    yield put({\n      type: types.PUT_TODO_FAILURE,\n      payload: e\n    });\n  }\n}\n\nfunction* deleteTodo(action) {\n  const {\n    listId,\n    id\n  } = action.payload;\n\n  try {\n    let newTodo = yield axios.put(`http://localhost:3001/list/todo/delete/${listId}`, {\n      id: id\n    });\n    yield put({\n      type: types.DELETE_TODO_SUCCESS,\n      payload: newTodo.data\n    });\n  } catch (e) {\n    yield put({\n      type: types.DELETE_TODO_FAILURE,\n      payload: e\n    });\n  }\n}\n\nfunction* changeStatus(action) {\n  console.log(22, action.payload);\n\n  try {\n    let newTodo = yield axios.put(`http://localhost:3001/list/todo/changeStatus/${action.payload.id}`, action.payload);\n    yield put({\n      type: types.PUT_TODO_SUCCESS,\n      payload: newTodo.data\n    });\n  } catch (e) {\n    yield put({\n      type: types.PUT_TODO_FAILURE,\n      payload: e\n    });\n  }\n}\n\nfunction* todoSaga() {\n  yield takeEvery(types.POST_TODO_REQUEST, postTodo);\n  yield takeEvery(types.PUT_TODO_REQUEST, editTodo);\n  yield takeEvery(types.DELETE_TODO_REQUEST, deleteTodo);\n  yield takeEvery(types.CHANGE_STATUS_REQUEST, changeStatus);\n}\n\nexport default todoSaga;","map":{"version":3,"sources":["/home/rana/Documents/todoList/todolist/src/redux/sagas/todoSaga.js"],"names":["call","put","takeEvery","takeLatest","types","axios","postTodo","action","newTodos","post","payload","id","data","type","POST_TODO_SUCCESS","e","POST_TODO_FAILURE","message","editTodo","newTodo","PUT_TODO_SUCCESS","PUT_TODO_FAILURE","deleteTodo","listId","DELETE_TODO_SUCCESS","DELETE_TODO_FAILURE","changeStatus","console","log","todoSaga","POST_TODO_REQUEST","PUT_TODO_REQUEST","DELETE_TODO_REQUEST","CHANGE_STATUS_REQUEST"],"mappings":"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","sourcesContent":["import {call,put,takeEvery,takeLatest} from 'redux-saga/effects';\nimport * as types from '../types';\nimport axios from 'axios';\n\n\nfunction* postTodo(action){\n\ttry{\n\t\tlet newTodos = yield axios.post(`http://localhost:3001/list/todo/${action.payload.id}`,action.payload.data);\n\t\tyield put({type: types.POST_TODO_SUCCESS, payload: newTodos})\n\t}catch(e){\n\t\tyield put({type: types.POST_TODO_FAILURE, payload: e.message})\t\n\t}\n}\n\nfunction* editTodo(action){\n\ttry{\n\t\tlet newTodo = yield axios.put(`http://localhost:3001/list/todo/${action.payload.id}`,action.payload.data);\n\t\tyield put({type: types.PUT_TODO_SUCCESS, payload: newTodo.data})\n\t}catch(e){\n\t\tyield put({type: types.PUT_TODO_FAILURE, payload: e})\t\n\t}\n}\n\nfunction* deleteTodo(action){\n\tconst {listId, id} = action.payload;\n\ttry{\n\t\tlet newTodo = yield axios.put(`http://localhost:3001/list/todo/delete/${listId}`, {id: id});\n\t\tyield put({type: types.DELETE_TODO_SUCCESS, payload: newTodo.data})\n\t}catch(e){\n\t\tyield put({type: types.DELETE_TODO_FAILURE, payload: e})\n\t}\n}\n\nfunction* changeStatus(action){\n\tconsole.log(22,action.payload);\n\ttry{\n\t\tlet newTodo = yield axios.put(`http://localhost:3001/list/todo/changeStatus/${action.payload.id}`,action.payload);\n\t\tyield put({type: types.PUT_TODO_SUCCESS, payload: newTodo.data})\n\t}catch(e){\n\t\tyield put({type: types.PUT_TODO_FAILURE, payload: e})\t\n\t}\n}\n\n\nfunction* todoSaga(){\n\tyield takeEvery(types.POST_TODO_REQUEST, postTodo);\n\tyield takeEvery(types.PUT_TODO_REQUEST, editTodo);\n\tyield takeEvery(types.DELETE_TODO_REQUEST, deleteTodo);\n\tyield takeEvery(types.CHANGE_STATUS_REQUEST, changeStatus);\n}\n\nexport default todoSaga;"]},"metadata":{},"sourceType":"module"}