{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as types from '../types';\n\nfunction getApi() {\n  return axios.get('http://localhost:3001/lists').then(resp => resp.json()).catch(e => e);\n}\n\nfunction* fetchLists(action) {\n  try {\n    const lists = yield call(getApi);\n    yield put({\n      type: types.GET_LISTS_SUCCESS,\n      payload: lists.data.data.listData\n    });\n  } catch (e) {\n    yield put({\n      type: types.GET_LISTS_FAILURE,\n      payload: e.message\n    });\n  }\n}\n\nfunction* listSaga() {\n  yield takeLatest(types.GET_LISTS_REQUEST, fetchLists);\n}\n\nexport default listSaga;","map":{"version":3,"sources":["/home/rana/Documents/todoList/todolist/src/redux/sagas/listSaga.js"],"names":["call","put","takeEvery","takeLatest","types","getApi","axios","get","then","resp","json","catch","e","fetchLists","action","lists","type","GET_LISTS_SUCCESS","payload","data","listData","GET_LISTS_FAILURE","message","listSaga","GET_LISTS_REQUEST"],"mappings":"AAAA,SAAQA,IAAR,EAAaC,GAAb,EAAiBC,SAAjB,EAA2BC,UAA3B,QAA4C,oBAA5C;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;;AAEA,SAASC,MAAT,GAAiB;AAChB,SAAOC,KAAK,CAACC,GAAN,CAAU,6BAAV,EACLC,IADK,CACCC,IAAD,IAASA,IAAI,CAACC,IAAL,EADT,EAELC,KAFK,CAEEC,CAAD,IAAOA,CAFR,CAAP;AAGA;;AAGD,UAAUC,UAAV,CAAqBC,MAArB,EAA4B;AAC3B,MAAG;AACF,UAAMC,KAAK,GAAG,MAAMf,IAAI,CAACK,MAAD,CAAxB;AACA,UAAMJ,GAAG,CAAC;AAACe,MAAAA,IAAI,EAAEZ,KAAK,CAACa,iBAAb;AAAgCC,MAAAA,OAAO,EAAEH,KAAK,CAACI,IAAN,CAAWA,IAAX,CAAgBC;AAAzD,KAAD,CAAT;AACA,GAHD,CAGC,OAAMR,CAAN,EAAQ;AACR,UAAMX,GAAG,CAAC;AAACe,MAAAA,IAAI,EAAEZ,KAAK,CAACiB,iBAAb;AAAgCH,MAAAA,OAAO,EAAEN,CAAC,CAACU;AAA3C,KAAD,CAAT;AACA;AACD;;AAGD,UAAUC,QAAV,GAAoB;AACnB,QAAMpB,UAAU,CAACC,KAAK,CAACoB,iBAAP,EAAyBX,UAAzB,CAAhB;AACA;;AAED,eAAeU,QAAf","sourcesContent":["import {call,put,takeEvery,takeLatest} from 'redux-saga/effects';\nimport * as types from '../types';\n\nfunction getApi(){\n\treturn axios.get('http://localhost:3001/lists')\n\t\t.then((resp)=> resp.json())\n\t\t.catch((e) => e)\n}\n\n\nfunction* fetchLists(action){\n\ttry{\n\t\tconst lists = yield call(getApi);\n\t\tyield put({type: types.GET_LISTS_SUCCESS, payload: lists.data.data.listData})\n\t}catch(e){\n\t\tyield put({type: types.GET_LISTS_FAILURE, payload: e.message})\n\t}\n}\n\n\nfunction* listSaga(){\n\tyield takeLatest(types.GET_LISTS_REQUEST,fetchLists);\n}\n\nexport default listSaga;\n"]},"metadata":{},"sourceType":"module"}