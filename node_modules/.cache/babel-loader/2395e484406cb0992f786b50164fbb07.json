{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as types from '../types';\nimport axios from 'axios';\n\nfunction getApi() {\n  return axios.get('http://localhost:3001/lists').then(resp => resp).catch(e => e);\n}\n\nfunction* fetchLists(action) {\n  alert(1);\n\n  try {\n    const lists = yield call(getApi);\n    yield put({\n      type: types.GET_LISTS_SUCCESS,\n      payload: lists.data.data.listData\n    });\n  } catch (e) {\n    yield put({\n      type: types.GET_LISTS_FAILURE,\n      payload: e.message\n    });\n  }\n}\n\nfunction* postApi(action) {\n  try {\n    let newList = yield axios.post('http://localhost:3001/lists', action.payload);\n    yield put({\n      type: types.POST_LIST_SUCCESS,\n      payload: newList.data\n    });\n  } catch (e) {\n    yield put({\n      type: types.POST_LIST_FAILURE,\n      payload: e.message\n    });\n  }\n}\n\nfunction* editList(action) {\n  try {\n    let newList = yield axios.put(`http://localhost:3001/lists/${action.payload.id}`, action.payload.data);\n    yield put({\n      type: types.PUT_LIST_SUCCESS,\n      payload: newList.data\n    });\n  } catch (e) {\n    yield put({\n      type: types.PUT_LIST_FAILURE,\n      payload: e.message\n    });\n  }\n}\n\nfunction* deleteList(action) {\n  try {\n    let newList = yield axios.delete(`http://localhost:3001/lists/delete/${action.payload}`);\n    yield put({\n      type: types.DELETE_LIST_SUCCESS,\n      payload: newList.data.data\n    });\n  } catch (e) {\n    yield put({\n      type: types.DELETE_LIST_FAILURE,\n      payload: e.message\n    });\n  }\n}\n\nfunction* listSaga() {\n  yield takeLatest(types.GET_LISTS_REQUEST, fetchLists);\n  yield takeEvery(types.POST_LIST_REQUEST, postApi);\n  yield takeEvery(types.PUT_LIST_REQUEST, editList);\n  yield takeEvery(types.DELETE_LIST_REQUEST, deleteList);\n}\n\nexport default listSaga;","map":{"version":3,"sources":["/home/rana/Documents/todoList/todolist/src/redux/sagas/listSaga.js"],"names":["call","put","takeEvery","takeLatest","types","axios","getApi","get","then","resp","catch","e","fetchLists","action","alert","lists","type","GET_LISTS_SUCCESS","payload","data","listData","GET_LISTS_FAILURE","message","postApi","newList","post","POST_LIST_SUCCESS","POST_LIST_FAILURE","editList","id","PUT_LIST_SUCCESS","PUT_LIST_FAILURE","deleteList","delete","DELETE_LIST_SUCCESS","DELETE_LIST_FAILURE","listSaga","GET_LISTS_REQUEST","POST_LIST_REQUEST","PUT_LIST_REQUEST","DELETE_LIST_REQUEST"],"mappings":"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","sourcesContent":["import {call,put,takeEvery,takeLatest} from 'redux-saga/effects';\nimport * as types from '../types';\nimport axios from 'axios';\n\n\nfunction getApi(){\n\treturn axios.get('http://localhost:3001/lists')\n\t\t.then(resp=> resp)\n\t\t.catch((e) => e)\n}\n\n\nfunction* fetchLists(action){\n\talert(1);\n\ttry{\n\t\tconst lists = yield call(getApi);\n\t\tyield put({type: types.GET_LISTS_SUCCESS, payload: lists.data.data.listData})\n\t}catch(e){\n\t\tyield put({type: types.GET_LISTS_FAILURE, payload: e.message})\n\t}\n}\n\n\nfunction* postApi(action){\n\ttry{\n\t\tlet newList = yield axios.post('http://localhost:3001/lists',action.payload);\n\t\tyield put({type: types.POST_LIST_SUCCESS, payload: newList.data})\n\t}catch(e){\n\t\tyield put({type: types.POST_LIST_FAILURE, payload: e.message})\t\n\t}\n}\n\nfunction* editList(action){\n\ttry{\n\t\tlet newList = yield axios.put(`http://localhost:3001/lists/${action.payload.id}`,action.payload.data);\n\t\tyield put({type: types.PUT_LIST_SUCCESS, payload: newList.data})\n\t}catch(e){\n\t\tyield put({type: types.PUT_LIST_FAILURE, payload: e.message})\t\n\t}\n}\n\nfunction* deleteList(action){\n\ttry{\n\t\tlet newList = yield axios.delete(`http://localhost:3001/lists/delete/${action.payload}`)\n\t\tyield put({type: types.DELETE_LIST_SUCCESS, payload: newList.data.data})\n\t}catch(e){\n\t\tyield put({type: types.DELETE_LIST_FAILURE, payload: e.message})\n\t}\n}\n\nfunction* listSaga(){\n\tyield takeLatest(types.GET_LISTS_REQUEST,fetchLists);\n\tyield takeEvery(types.POST_LIST_REQUEST, postApi);\n\tyield takeEvery(types.PUT_LIST_REQUEST, editList);\n\tyield takeEvery(types.DELETE_LIST_REQUEST, deleteList)\n}\n\nexport default listSaga;\n"]},"metadata":{},"sourceType":"module"}